#!/usr/bin/env bash
WORKING_DIR="$PWD"
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

echo
echo "THIS SCRIPT SHOULD ONLY BE RUN ON A RASPBERRY PI"
echo "This check will not be performed."
echo

echo "If this is a Raspberry Pi 4 (or greater), the EEPROM should be updated before continuting."
echo
read -r -p "Update RPi 4 EEPROM? (Y/N): " 
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "The system will reboot after updating the EEPROM."
    echo "Rerun this script after rebooting."
    echo
    read -r -p "Continue with EEPROM update and reboot? (Y/N): " 
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit
    fi
    sudo rpi-eeprom-update
    sudo rpi-eeprom-update -a
    sudo shutdown -r now
fi

# Add some stuff to PATH
APPEND='export PATH'
FILE="$HOME/.bashrc"
sudo grep -qxF "$APPEND" "$FILE" || echo "$APPEND" | tee -a "$FILE" > /dev/null

APPEND='PATH="/usr/local/ccache:$PATH"'
FILE="$HOME/.bashrc"
sudo grep -qxF "$APPEND" "$FILE" || echo "$APPEND" | tee -a "$FILE" > /dev/null

mkdir -p "$HOME/.local/bin"
APPEND='PATH="$PATH:$HOME/.local/bin"'
FILE="$HOME/.bashrc"
sudo grep -qxF "$APPEND" "$FILE" || echo "$APPEND" | tee -a "$FILE" > /dev/null

# Add env variables to ~/.bashrc
cd "$SCRIPT_DIR"
STRING="# Generated by ROS Install Script"
FILE="$HOME/.bashrc"
if [ -z "$(grep "$STRING" "$FILE")" ]; then
    cat ./bashrc-append-raspi.txt >> "$FILE"
    echo "Appended ROS settings to ~/.bashrc"
fi
echo "Please check ROS settings in ~/.bashrc to ensure they are correct for your device."
echo
read -r -p "Continue with install? (Y/N): " 
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit
fi

source "$FILE"

echo "Downloading ROS keyring..."
KEYRING_FILE="/usr/share/keyrings/ros-keyring.gpg"
sudo mkdir -p "/usr/share/keyrings"
# Download ROS keyring
sudo gpg --no-default-keyring \
         --keyring "$KEYRING_FILE" \
         --keyserver hkp://keyserver.ubuntu.com:80 \
         --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
echo "Received file: $KEYRING_FILE"
file "$KEYRING_FILE"

# Convert to PGP/GPG type
# sudo gpg --no-default-keyring \
#         --keyring "/usr/share/keyrings/ros-keyring-original.gpg" \
#         --export \
#         --output "/usr/share/keyrings/ros-keyring.gpg"

# Create sources file so APT can see it
echo "Installing ROS keyring..."
echo "deb [signed-by=$KEYRING_FILE] http://packages.ros.org/ros/ubuntu buster main" \
  | sudo tee "/etc/apt/sources.list.d/ros-latest.list" > /dev/null

# Prerequisites
echo "Installing ROS prerequisites..."
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install -y gcc g++ ccache build-essential cmake vim ca-certificates \
                        python3 python3-pip python3-venv \
                        python3-rosdep python3-rosinstall python3-rosinstall-generator \
                        python3-vcstool python3-wstool python3-catkin-tools

echo "Python version:"
python --version
pip3 --version

echo
echo "If either of these are not Python 3 versions, abort this script and set Python 3 as the default for 'python'."
echo "You may  be able to fix this by running:"
echo "sudo update-alternatives --install /usr/local/bin/python python /usr/bin/python3 80"
echo
read -r -p "Continue with install? (Y/N): " 
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit
fi

# ROSDEP
echo "Initializing ROSDEP..."
sudo rosdep init
rosdep --rosdistro=$ROS_DISTRO --os=$ROS_OS_OVERRIDE update

# Create installation space
if [ -d "$HOME/Downloads" ]; then
    echo "Creating ROS installation space in ~/Downloads..."
    mkdir -p "$HOME/Downloads/rosinstall-catkin-ws"
    cd "$HOME/Downloads/rosinstall-catkin-ws";
else
    echo "Creating ROS installation space in ~/downloads..."
    mkdir -p "$HOME/downloads/rosinstall-catkin-ws"
    cd "$HOME/downloads/rosinstall-catkin-ws";
fi

# Generate install files
rosinstall_generator --rosdistro=$ROS_DISTRO --deps --wet-only --tar PACKAGES > noetic-config.rosinstall



cd "$PWD"